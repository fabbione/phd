#!/bin/bash

# Copyright (c) 2013 David Vossel <dvossel@redhat.com>
#                    All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#

PHD_BINARY_DIR=`dirname $0`
if [ -z "$PHDCONST_ROOT" ]; then
    if [ -f ${PHD_BINARY_DIR}/phd_exec.in ]; then
	# Running from the source tree
	PHDCONST_ROOT="$PHD_BINARY_DIR/.."
	scenario_dir="$PHDCONST_ROOT/scenarios"
    else
	PHDCONST_ROOT="@libexecdir@/phd"
    fi
fi

# Location of current scenario data
exec_dir="@localstatedir@/lib/phd"
definition="@sysconfdir@/phd/cluster_definition.conf"
if [ -z "$scenario_dir" ]; then
	scenario_dir="@libexecdir@/@PACKAGE@/scenarios"
fi
variables=""

if ! [ -w $exec_dir ]; then
       exec_dir="$HOME/phd_state"
       mkdir -p $exec_dir
fi

. ${PHDCONST_ROOT}/lib/transport_ssh.sh
. ${PHDCONST_ROOT}/lib/phd_utils_api.sh
. ${PHDCONST_ROOT}/lib/scenario_engine.sh
. ${PHDCONST_ROOT}/lib/definition.sh


function helptext() {
	echo "==========================================================="
	echo "phd_exec - A tool for executing pacemaker cluster scenarios"
	echo "==========================================================="
	echo ""
	echo "Usage: phd_exec -s <scenario_file> [options]"
	echo "The default behavior when only the scenario file is provided"
	echo "is to execute the scenario deployment on the cluster definition"
	echo "configured in the $defintion file"
	echo ""
	echo "Options"
	echo "-p, --print-env          Print cluster definition environment variables"
	echo "-s, --scenario           Scenario file name."
	echo "-V, --variables          Variable definitions"
	echo "-l, --list-scenarios     List installed scenario files."
	echo "-d, --definition         Custom definition file location. Defaults to $definition"
	echo "-v, --verify-definition  Verify cluster definition can run the scenario file"
	echo "-i, --test-iterations    Number of test iterations to run"
	echo "-t, --run-tests          Deploy scenario and run scenario tests after deployment."
	echo "-o, --run-tests-only     Only run tests on deployment." 
	echo "-a, --distribute-api-only     Only redistribute the current phd api. This is useful during scenario development." 
	echo "-A, --distribute-api-never    Assume the current phd api is already in place. This is useful during scenario development." 
	echo "-f, --log-file           Custom logfile location."
	echo "-L, --log-level-stdout   Log level 0-4. The higher the level, the more output."
	echo "-q, --quiet              Keep stdout quiet."
	echo ""
	exit $1
}

print_env=0
check_only=0
tests=0
log_file="$exec_dir/phd.log"
only_tests=0
test_iter=10
api_only=0
api_init=1

while true ; do
	case "$1" in
	--help|-h|-\?) helptext 0;;
	-p|--print-env) print_env=1; shift;;
	-v|--verify)     check_only=1; shift;;
	-i|--test-iterations)  test_iter=$2; shift; shift;;
	-t|--run-tests)  tests=1; shift;;
	-o|--run-tests-only)  only_tests=1; shift;;
	-a|--distribute-api-only)  api_only=1; shift;;
	-A|--distribute-api-never)  api_init=0; shift;;
	-f|--log-file)  log_file=$2; shift; shift;;
	-d|--definition)  definition=$2; shift; shift;;
	-s|--scenario)  scenario=$2; shift; shift;;
	-V|--variables)  variables=$2; shift; shift;;
	-l|--list-scenarios) ls -1 $scenario_dir
		exit 0;;
	-L|--log-level-stdout) phd_set_log_level $2; shift; shift;;
	-q|--quiet) phd_enable_stdout_log 0; shift;;
	"") break;;
	*) helptext 1;;
	esac
done

phd_set_log_file "$log_file"
phd_set_exec_dir "$exec_dir/phd_scenario"
definition_unpack $definition

if [ $api_only -eq 1 ]; then
	scenario_distribute_api
	if [ -z "$scenario" ]; then
		exit 0
	fi
fi

if [ -z "$scenario" ]; then
	echo "Error: Must provide valid scenario file."
	echo ""
	helptext 1
fi

# Attempt to locate scenario file
if [ ! -e "$scenario" ]; then
	scenario="$scenario_dir/$scenario" 
	if [ ! -e "$scenario" ]; then
		scenario="${scenario}.scenario"
		if [ ! -e "$scenario" ]; then
			echo "Error: Can not find specified scenario file"
			exit 1
		fi
	fi
fi
PHD_SCENARIO=$(basename $scenario)

if [ ! -z "$variables" ]; then
    if [ ! -e "$variables" ]; then
	variables="$HOME/.phd/$variables" 
	if [ ! -e "$variables" ]; then
		variables="${variables}.variables"
		if [ ! -e "$variables" ]; then
			echo "Error: Can not find specified variables file"
			exit 1
		fi
	fi
    fi
fi

scenario_unpack $scenario $variables
if [ $print_env -eq 1 ]; then
	print_definition
	print_scenario
	exit 0
fi
if [ $check_only -eq 1 ]; then
	scenario_verify
	echo "Success"
	exit 0
fi

if [ $only_tests -eq 1 ]; then
	scenario_exec_tests "$test_iter"
	exit $?
fi

scenario_exec
if [ $tests -eq 1 ]; then
	scenario_exec_tests "$test_iter"
fi
